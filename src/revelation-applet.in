#!/usr/bin/env python

#
# Revelation 0.4.3 - a password manager for GNOME 2
# http://oss.codepoet.no/revelation/
# $Id$
#
# Applet for account lookup
#
#
# Copyright (c) 2003-2005 Erik Grinaker
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

import gnome, gnome.applet, gtk, os, sys

if "@pythondir@" not in sys.path:
	sys.path.insert(0, "@pythondir@")

from revelation import config, data, datahandler, dialog, entry, io, ui, util


class RevelationApplet(object):
	"Revelation applet"

	def __init__(self, applet, iid):
		self.applet	= applet
		self.iid	= iid

		sys.excepthook	= self.__cb_exception

		self.__init_facilities()
		self.__init_ui()
		self.__init_states()


	def __init_facilities(self):
		"Sets up facilities"

		self.applet.add_preferences("/schemas/apps/revelation-applet/prefs")

		self.config	= config.Config(self.applet.get_preferences_key())
		self.datafile	= io.DataFile(datahandler.Revelation)
		self.entrystore	= data.EntryStore()
		self.items	= ui.ItemFactory(self.applet)

		self.datafile.connect("changed", self.__cb_file_changed)

		self.__setup_prefs()


	def __init_states(self):
		"Sets up the initial states"

		self.datafile.emit("changed", self.datafile.get_file())


	def __init_ui(self):
		"Sets up the main ui"

		self.applet.set_flags(gnome.applet.EXPAND_MINOR)

		# set up popup menu
		menuxml = """
<popup name="button3">
	<menuitem name="file-unlock"	verb="file-unlock"	label="Unlock File"		pixtype="stock" pixname="revelation-unlock" />
	<menuitem name="file-lock"	verb="file-lock"	label="Lock File"		pixtype="stock" pixname="revelation-lock" />
	<menuitem name="file-reload"	verb="file-reload"	label="Reload File"		pixtype="stock" pixname="revelation-reload" />
	<separator />
	<menuitem name="revelation"	verb="revelation"	label="Start Revelation"	pixtype="stock" pixname="revelation-revelation" />
	<menuitem name="prefs"		verb="prefs"		label="Preferences"		pixtype="stock"	pixname="gtk-properties" />
	<menuitem name="about"		verb="about"		label="About"			pixtype="stock"	pixname="gnome-stock-about" />
	<menuitem name="kill"		verb="kill"		label="Kill"			pixtype="stock"	pixname="gtk-quit" />
</popup>
"""

		self.applet.setup_menu(menuxml, (
			( "about",		lambda w,d=None: self.about() ),
			( "file-lock",		lambda w,d=None: self.file_close() ),
			( "file-reload",	lambda w,d=None: self.file_reload() ),
			( "file-unlock",	lambda w,d=None: self.file_open(self.file_get_current()) ),
			( "kill",		lambda w,d=None: sys.exit() ),
			( "prefs",		lambda w,d=None: Preferences(None, self.config).run() ),
			( "revelation",		lambda w,d=None: self.launch_revelation() ),
		), None)

		# set up ui items
		self.entry	= ui.Entry()
		self.entry.connect("button_press_event", self.__cb_entry_buttonpress)

		self.icon	= ui.Image(ui.STOCK_REVELATION, ui.ICON_SIZE_APPLET)
		self.button	= ui.Button(None)
		self.button.add(self.icon)
		self.button.set_relief(gtk.RELIEF_NONE)
		self.button.connect("button_press_event", self.__cb_button_buttonpress)
		self.button.connect("clicked", self.__cb_button_clicked)

		self.applet.add(ui.HBox(self.button, self.entry))

		# set up menu
		self.entrymenu = None


	def __cb_button_buttonpress(self, widget, data = None):
		"Callback for buttonpress on button"

		if data.button != 1:
			self.applet.emit("button_press_event", data)
			return True

		else:
			return False


	def __cb_button_clicked(self, widget, data = None):
		"Callback for clicked button"

		if self.datafile.get_file() == None:
			self.file_open(self.file_get_current())

		elif self.entrymenu != None:

			def position(data):
				x, y = self.applet.window.get_origin()

				a = self.applet.get_allocation()
				x += a.x
				y += a.y

				rx, ry = self.applet.size_request()
				y += ry

				return x, y, False

			self.entrymenu.show_all()
			self.entrymenu.popup(None, None, position, 1, 0)


	def __cb_exception(self, type, value, trace):
		"Callback for unhandled exceptions"

		if type == KeyboardInterrupt:
			sys.exit(1)

		traceback = util.trace_exception(type, value, trace)
		sys.stderr.write(traceback)

		if dialog.Exception(None, traceback).run() == True:
			gtk.main()

		else:
			sys.exit(1)


	def __cb_entry_buttonpress(self, widget, data = None):
		"Callback for button presses"

		if data.button == 1:

			# from gnome 2.10, the panel doesn't receive focus when clicked
			if hasattr(self.applet, "request_focus") == True:
				self.applet.request_focus(data.time)

		#else:
		#	if self.entry.is_sensitive() == False:
		#		self.applet.emit("button_press_event", data)


	def __cb_file_changed(self, widget, data = None):
		"Callback for changed data file"

		popup = self.applet.get_popup_component()

		if self.datafile.get_file() == None:
			self.entry.set_text("")
			self.entry.set_sensitive(False)

			if self.file_get_current() != "":
				popup.set_prop("/commands/file-unlock", "sensitive", "1")

			else:
				popup.set_prop("/commands/file-unlock", "sensitive", "1")

			popup.set_prop("/commands/file-lock", "sensitive", "0")
			popup.set_prop("/commands/file-reload", "sensitive", "0")

		else:
			self.entry.set_sensitive(True)
			popup.set_prop("/commands/file-unlock", "sensitive", "0")
			popup.set_prop("/commands/file-lock", "sensitive", "1")
			popup.set_prop("/commands/file-reload", "sensitive", "1")


	def __setup_prefs(self):
		"Sets up any missing preferences"

		# TODO this shouldn't really be necessary, the schema should
		# be used for defaults - is this possible with the current
		# applet api?

		defaults = {
			"file"	: "",
		}

		for key, value in defaults.items():
			try:
				self.config.get(key)

			except config.ConfigError:
				self.config.set_force(key, value)


	def about(self):
		"Displays an about dialog"

		About(self.applet).run()


	def file_close(self):
		"Closes the current data file"

		self.datafile.close()
		self.entrystore.clear()
		self.entrymenu = None


	def file_get_current(self):
		"Returns the current data file"

		return "/home/erikg/dev/revelation/pwtest"


	def file_open(self, file, password = None):
		"Opens a data file"

		try:
			if file in ( "", None ):
				return

			entrystore = self.datafile.load(file, password, lambda: dialog.PasswordOpen(None, os.path.basename(file)).run())

			self.entrystore.clear()
			self.entrystore.import_entry(entrystore, None)
			self.entrystore.changed = False

			self.entrymenu = self.generate_entrymenu(self.entrystore)

		except dialog.CancelError:
			return

		except datahandler.FormatError:
			dialog.Error(None, "Invalid file format", "The file '%s' contains invalid data." % file).run()

		except ( datahandler.DataError, entry.EntryTypeError, entry.EntryFieldError ):
			dialog.Error(None, "Unknown data", "The file '%s' contains unknown data. It may have been created by a more recent version of Revelation.." % file).run()

		except datahandler.VersionError:
			dialog.Error(None, "Unknown data version", "The file '%s' has a future version number, please upgrade Revelation to open it." % file).run()

		except datahandler.DetectError:
			dialog.Error(None, "Unable to detect filetype", "The file type of the file '%s' could not be automatically detected. Try specifying the file type manually." % file).run()

		except datahandler.PasswordError:
			dialog.Error(None, "Incorrect password", "You entered an incorrect password for the file '%s', please try again." % file).run()

		except IOError:
			dialog.Error(None, "Unable to open file", "The file '%s' could not be opened. Make sure that the file exists, and that you have permissions to open it." % file).run()


	def file_reload(self):
		"Reloads the current data file"

		if self.datafile.get_file() != None:
			self.file_open(self.datafile.get_file(), self.datafile.get_password())


	def launch_revelation(self):
		"Launches Revelation"

		util.execute_child("revelation")


	def generate_entrymenu(self, entrystore, parent = None):
		"Generates an entry menu tree"

		menu = gtk.Menu()

		for i in range(entrystore.iter_n_children(parent)):
			iter = entrystore.iter_nth_child(parent, i)

			e = entrystore.get_entry(iter)
			item = ui.ImageMenuItem(type(e) == entry.FolderEntry and ui.STOCK_FOLDER or e.icon, e.name)

			if type(e) == entry.FolderEntry:
				item.set_submenu(self.generate_entrymenu(entrystore, iter))

			menu.append(item)

		return menu



class About(gnome.ui.About):
	"About dialog"

	def __init__(self, parent):
		gnome.ui.About.__init__(
			self, "Revelation Account Lookup", config.VERSION, config.COPYRIGHT,
			""""%s"\n\nAn applet for looking up account data from Revelation""" % config.RELNAME,
			( config.AUTHOR, ), None, "",
			parent.render_icon(ui.STOCK_REVELATION, gtk.ICON_SIZE_DIALOG)
		)


	def run(self):
		"Displays the dialog"

		self.show_all()



class Preferences(dialog.Utility):
	"A preference dialog"

	def __init__(self, parent, cfg):
		dialog.Utility.__init__(self, parent, "Preferences")
		self.config = cfg
		self.set_modal(False)

		self.section_file = self.add_section("File handling")

		self.entry_file = ui.FileEntry("Select File to Use")
		ui.config_bind(self.config, "file", self.entry_file)
		self.section_file.append_widget("File to use", self.entry_file)

		self.connect("response", lambda w,d: self.destroy())


	def run(self):
		"Runs the dialog"

		self.show_all()



def factory(applet, iid):
	"Applet factory function"

	RevelationApplet(applet, iid)
	applet.show_all()

	return True



if __name__ == "__main__":
	gnome.init(config.APPNAME, config.VERSION)

	gnome.applet.bonobo_factory(
		"OAFIID:GNOME_RevelationApplet_Factory",
		gnome.applet.Applet.__gtype__,
		config.APPNAME, config.VERSION, factory
	)

