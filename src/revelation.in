#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# The Revelation application
# $Id$
#
# Copyright Â©2003-2007 Erik Grinaker <erikg@codepoet.no>
#
# This file is part of Revelation.
#
# Revelation is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Revelation is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from __future__ import absolute_import

import gettext
import gnome
import gnome.ui
import gtk
import os
import sys

if "$python_libdir$" not in sys.path:
	sys.path.insert(0, "$python_libdir$")

from revelation import config
from revelation import dialog
from revelation import error
from revelation import stock
from revelation import ui

_ = gettext.gettext



class Revelation(ui.App):
	"The Revelation application"

	def __init__(self):
		os.umask(0077)
		gettext.bindtextdomain(config.PACKAGE, config.DIR_LOCALE)

		ui.App.__init__(self, config.NAME, config.PACKAGE, config.VERSION, sys.argv)

		self.connect("delete-event", self.__cb_quit)

		try:
			self.__init_actions()
			self.__init_ui()
			self.__init_state()

		except error.LoadError, e:
			dialog.ErrorDialog(self, _('Failed to load data file'), _('The file %s could not be loaded:\n\n%s' % ( e.file, e.message ))).run()
			sys.exit(1)


	def __init_actions(self):
		"Sets up actions"

		# set up action groups
		group_global	= ui.ActionGroup("global")
		group_menubar	= ui.ActionGroup("menubar")

		self.uimanager.append_action_group(group_global)
		self.uimanager.append_action_group(group_menubar)

		# set up global actions
		group_global.add_actions([
			( "file-close",		stock.STOCK_CLOSE,	None, None, _('Closes the application'),	self.__cb_quit),
			( "file-quit",		stock.STOCK_QUIT,	None, None, _('Quits the application'),		self.__cb_quit),
			( "help-about",		stock.STOCK_ABOUT,	None, None, _('About this application'),	self.__cb_about),
		])

		# set up menubar actions
		group_menubar.add_actions([
			( "menu-file",		None,			_('_File') ),
			( "menu-help",		None,			_('_Help') ),
		])

		# load ui from file
		self.uimanager.add_ui_from_file("%s/menubar.xml" % config.DIR_UI)


	def __init_state(self):
		"Sets up the application state"

		# load config
		self.config = config.Config("/apps/revelation")

		self.config.schema_ensure((
			"interface/pane-position",
			"interface/window-width",
			"interface/window-height",
			"dummy",
		), "%s/revelation.schemasa" % config.DIR_GCONFSCHEMAS)

		self.set_default_size(
			self.config.get("interface/window-width"),
			self.config.get("interface/window-height")
		)

		self.hpaned.set_position(self.config.get("interface/pane-position"))

		# set up session client
		self.sessionclient = gnome.ui.master_client()
		self.sessionclient.connect("die", lambda w: self.quit())
		self.sessionclient.connect("save-yourself", self.__cb_session_save)


	def __init_ui(self):
		"Sets up the user interface"

		# set up stock items and icons
		self.stockfactory = stock.StockFactory(self, config.DIR_ICONS)
		self.set_default_icon_list(self.stockfactory.get_pixbufs("revelation", ( 48, 32, 24, 16 )))

		# set up user interface
		self.set_menus(self.uimanager.get_widget("/menubar"))

		self.accountlist	= ui.AccountList()
		self.scrolledwindow	= ui.ScrolledWindow(self.accountlist)
		self.accountview	= ui.AccountView()
		self.hpaned		= ui.HPaned(self.scrolledwindow, ui.Alignment(self.accountview, 0.5, 0.5, 1, 0))
		self.set_contents(self.hpaned)


	def __cb_about(self, widget, data = None):
		"Callback for about"

		self.about()


	def __cb_quit(self, widget, data = None):
		"Callback for quit"

		self.quit()


	def __cb_session_save(self, widget, phase, what, end, interaction, fast, data = None):
		"Saves application state for the session client"

		self.sessionclient.set_current_directory(os.getcwd())
		self.sessionclient.set_clone_command(sys.argv[0])
		self.sessionclient.set_restart_command(1, [ sys.argv[0] ])

		self.save_state()

		return True


	def about(self):
		"Displays an about dialog"

		dialog.AboutDialog(self).run()


	def save_state(self):
		"Saves the state of the application"

		width, height = self.get_size()
		self.config.set("interface/window-width", width)
		self.config.set("interface/window-height", height)
		self.config.set("interface/pane-position", self.hpaned.get_position())


	def quit(self):
		"Quits Revelation"

		self.save_state()

		ui.App.quit(self)


	def run(self):
		"Runs the application"

		try:
			ui.App.run(self)

		except KeyboardInterrupt:
			self.quit()



if __name__ == "__main__":
	Revelation().run()
